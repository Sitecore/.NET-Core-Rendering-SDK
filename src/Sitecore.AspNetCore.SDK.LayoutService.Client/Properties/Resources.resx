<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Exception_AbstractRegistrationsMustProvideFactory" xml:space="preserve">
    <value>Abstract registrations must provide a factory to resolve a layout service.</value>
  </data>
  <data name="Exception_CouldNotContactService" xml:space="preserve">
    <value>Could not contact the Sitecore layout service.</value>
  </data>
  <data name="Exception_CouldNotConvertFieldToType" xml:space="preserve">
    <value>Could not convert field of type {0} into type {1}</value>
    <comment>fromType,toType</comment>
  </data>
  <data name="Exception_CouldNotFindConverter" xml:space="preserve">
    <value>Could not find converter for {0}.</value>
    <comment>objectType</comment>
  </data>
  <data name="Exception_DeserializationOfIncorrectToken" xml:space="preserve">
    <value>Expected an array or object when deserializing a {0}.  Found {1}.</value>
    <comment>expectedType, givenType</comment>
  </data>
  <data name="Exception_GeneralServiceError" xml:space="preserve">
    <value>An error occurred with the Sitecore layout service.</value>
  </data>
  <data name="Exception_HandlerNameIsNull" xml:space="preserve">
    <value>Handler name cannot be null.</value>
  </data>
  <data name="Exception_HandlerRegistryKeyNotFound" xml:space="preserve">
    <value>The {0} key cannot be found in the handler registry.</value>
    <comment>handlerName</comment>
  </data>
  <data name="Exception_InvalidRequestError" xml:space="preserve">
    <value>An invalid request was sent to the Sitecore layout service.</value>
  </data>
  <data name="Exception_InvalidResponseFormat" xml:space="preserve">
    <value>The Sitecore layout service returned a response in an invalid format.</value>
  </data>
  <data name="Exception_ItemNotFoundError" xml:space="preserve">
    <value>The Sitecore layout service returned an item not found response.</value>
  </data>
  <data name="Exception_LayoutServiceServerError" xml:space="preserve">
    <value>The Sitecore layout service returned a server error.</value>
  </data>
  <data name="Exception_MessageConfigurationError" xml:space="preserve">
    <value>An error occurred while configuring the HTTP message.</value>
  </data>
  <data name="Exception_ReadingField" xml:space="preserve">
    <value>The Field could not be read as the type {0}</value>
    <comment>type</comment>
  </data>
  <data name="Exception_RegisterTypesOfService" xml:space="preserve">
    <value>Can only register implementations of {0} as layout services.</value>
    <comment>serviceType</comment>
  </data>
  <data name="HttpStatusCode_KeyName" xml:space="preserve">
    <value>HTTP Status Code</value>
  </data>
</root>