name: Build

on:
  workflow_call:
    inputs:
      buildConfiguration:
        type: string
        required: true
        description: 'The build configuration to use'
        default: 'Release'
    outputs:
      newVersion:
        description: 'The new version number'
        value: ${{ jobs.build.outputs.newVersion }}

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      newVersion: ${{ steps.version.outputs.newVersion }}

    steps:
    - uses: actions/checkout@v4

    - name: Get Version Info
      uses: actions/github-script@v7
      id: get-version-info
      with:
        script: |
          async function getLatestRelease() {
            try {
              const response = await github.rest.repos.getLatestRelease({
                owner: context.repo.owner,
                repo: context.repo.repo
              });
              core.info('Previous Release Version = ' + response.data.tag_name);
              core.setOutput('previousVersion', response.data.tag_name);
            } catch (error) {
              if (error.status === 404) {
                core.info('No releases found for this repository.');
                core.setOutput('previousVersion', '0.0.0');
              } else {
                console.error('An error occurred while fetching the latest release: ', error);
                throw error;
              }
            }
          }

          async function getCommitMessage() {
            try {
              const response = await github.rest.repos.getCommit({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: context.sha
              });
              core.info('Commit Message = ' + response.data.commit.message);
              core.setOutput('commitMessage', response.data.commit.message);
            } catch (error) {
              console.error('An error occurred while fetching the commit message: ', error);
              throw error;
            }
          }

          await getLatestRelease();
          await getCommitMessage();

    - name: Version
      id: version  
      shell: pwsh
      run: |
        $message = @"
        ${{ steps.get-version-info.outputs.commitMessage }}
        "@  
        ./.github/workflows/Version.ps1 -Path "./src/Directory.Build.props" -PreviousVersion ${{ steps.get-version-info.outputs.previousVersion }} -Message $message >> $Env:GITHUB_OUTPUT

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build -c ${{ inputs.buildConfiguration }} --no-restore

    - name: Test
      run: dotnet test -c ${{ inputs.buildConfiguration }} --no-build --verbosity normal --logger trx --collect:"XPlat Code Coverage" --results-directory TestResults

    - name: Upload dotnet test results
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: TestResults
      if: ${{ always() }}

    - name: Run Benchmarks
      working-directory: ./tests/Sitecore.AspNetCore.SDK.RenderingEngine.Benchmarks
      run: dotnet run -c Release

    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: perf-results
        path: ./tests/Sitecore.AspNetCore.SDK.RenderingEngine.Benchmarks/BenchmarkDotNet.Artifacts

    - name: Package
      run: dotnet pack -c ${{ inputs.buildConfiguration }} --no-build --output nupkgs

    - name: Upload packages
      uses: actions/upload-artifact@v4
      with:
        name: packages
        path: nupkgs